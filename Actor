//
//  Actor.swift
//  Swift2DGames
//
//  Created by Razieh Moatamedi on 17/03/15.
//  Copyright Â© 2015 Razieh Moatamedi. All rights reserved.
//

import AppKit

/**
 Return true if `lhs` and `rhs` wrap equal underlying `Actor`s.
 
 - requires: The types of indices wrapped by `lhs` and `rhs` are identical.
 */
func ==(lhs: Actor, rhs: Actor) -> Bool{
    return lhs == rhs
}

/**
 This is the class from which you create all your game-objects - instances of this class should be added to a World.
 */
class Actor : NSView {
    
    /// The Actors position on the x and y axes.
    var x, y: Int
    
    /// The Actors width in pixels.
    var width, height: Int
    
    /// The world that the Actor is connected to.
    var world: World
    
    /// Actor image handling from S2DGImage.
    var image: S2DGImage = S2DGImage()
    
    /// An NSImageView object displays image data from an NSImage object in a frame.
    var imageView: NSImageView?
    
    /**
     Constructor
     
     - parameter world: The World where the Actors is connected to.
     - parameter width: The Actors width in pixels.
     - parameter height: The Actors height in pixels.
     */
    init(world: World, width: Int, height: Int) {
        x = 0
        y = 0
        self.world = world
        self.width = width
        self.height = height
        let rect = NSMakeRect(0, 0, CGFloat(width), CGFloat(height))
        super.init(frame: rect)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    /// get and set position and dimension
    /**
    Returns the Actors position on the x-axis.
    - returns: the Actors position on the x-axis.
    */
    func getX() -> Int {
        return x;
    }
    
    /**
     Returns the Actors position on the y-axis.
     - returns: The Actors position on the y-axis
     */
    func getY() -> Int {
        return y;
    }
    
    /**
     Gives the Actor a new position in the world
     
     - parameter newX: The new position on the x axis.
     - parameter newY: The new position on the y axis.
     */
    func setPosition(newX: Int, newY: Int) {
        self.x = newX
        self.y = newY
        imageView!.frame.origin = NSPoint(x: newX, y: newY)
    }
    
    /**
     Returns the width of the Actor.
     - returns: The width of the Actor.
     */
    func getWidth() -> Int {
        return Int(width)
    }
    
    /**
     Returns the height of the Actor.
     - returns: The height of the Actor.
     */
    func getHeight() -> Int {
        return Int(height)
    }
    
    /**
     Creates a invisible rectangle based on the Actors position and dimensions -
     This is used for the collision detection.
     - returns: A rectangle with the same size and position of the Actor.
     */
    func getBounds() -> NSRect {
        let rect = NSMakeRect(CGFloat(x+(image.getWidth()/2)), CGFloat(y+(image.getHeight()/2)), CGFloat(image.getWidth()), CGFloat(image.getHeight()))
        return rect
    }
    
    /*func setWorld1(w: World) {
        world = w
    }*/
    /**
     get the world the actor is placed within.
     Returns the world that the Actor is placed within.
     - returns: The world that the Actor is placed within.
     */
    func getWorld() -> World {
        return world
    }
    
    /**
     Returns the image of the Actors S2DGImage.
     - returns: The image of the Actors S2DGImage.
     */
    
    func getImage() -> NSImage {
        return image.getImage()
    }
    
    /**
     Assigns a image to the Actors S2DGImage-object.
     - parameter fileName: The name of the image file.
     */
    func setImage(fileName: String) {
        image.setImage(fileName)
        let rect = NSMakeRect(0, 0, CGFloat(image.getWidth()), CGFloat(image.getHeight()))
        imageView = NSImageView(frame: rect)
        imageView!.image = NSImage(byReferencingFile: fileName)
        imageView!.imageScaling = NSImageScaling.ScaleAxesIndependently
        world.addSubview(imageView!)
    }
    
    /**
     Actors behavior is to be called on every update
     - Empty method: this method is being called on every `game-update`.
     - This is where you must implement the behavior of the specific Actor class.
     */
    func act() {
    }
    
    /**
     checks for intersections
     
     Checks if the Actor is colliding with a given Actor.
     - parameter other: The object that the test is being performed upon.
     - returns: returns true if the Actor is overlapping the given input-Actor.
     */
    func collision(actor: Actor) -> Bool {
        if actor === self{
            return false
        } else {
            let intersection: CGRect? =  CGRectIntersection(getBounds(),actor.getBounds())
            return !CGRectIsNull(intersection!)
        }
    }
    
    /**
     key input
     Empty method, where the Actor gets its key-input in the form of a String.
     - parameter key: A String representation of the key that is pressed.
     */
    func getKeyPressed(key: String) {
    }
    
    /**
     Empty method - this is where the Actor gets its key-input in the form of a String.
     - parameter key: A String representation of the key that is released.
     */
    
    func getKeyReleased(key: String) {
    }
}
