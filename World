//
//  World.swift
//  Swift2DGames
//
//  Created by Razieh Moatamedi on 17/03/15.
//  Copyright Â© 2015 Razieh Moatamedi. All rights reserved.
//

import AppKit

/**
 This class defines the world where the game discloses. An instance of
 Actors are added to this class in order to be updated and displayed on screen.
 */
class World : NSView {
    
    /// The size of the quadratic cells to create the `grid` of the game.
    var cellSize: Int = 0
    
    /// Specifies the number of cells in the x-axis
    var lengthInCells: Int = 0
    
    /// Specifies the number of cells in the y-axis.
    var heightInCells: Int = 0
    
    /// The instance that this world is connected to.
    var s2dg: S2DG?
    
    /// An ArrayList that contains all the Actors added to this world.
    var actors: Array<Actor> = Array()
    
    /// Bachground image of the world.
    var image: S2DGImage = S2DGImage()
    
    /// An NSView object provides the infrastructure for drawing, printing, and handling events in an app.
    var view: NSView?
    
    ///An NSImageView object displays image data from an NSImage object in a frame.
    var imageView: NSImageView?
    
    /**
     constructor
     
     - parameter cellSize: sets the cellSize of this world.
     - parameter lengthInCells: sets the amount of cells in the x-axis.
     - parameter heightInCells: sets the amount of cells in the y-axis of this world.
     */
    init(cellSize: Int, lengthInCells: Int, heightInCells: Int) {
        if (cellSize <= 0 || lengthInCells <= 0 || heightInCells <= 0) {
            self.cellSize = 1
            self.lengthInCells = 100 * cellSize
            self.heightInCells = 100 * cellSize
            
        } else {
            self.cellSize = cellSize
            self.lengthInCells = lengthInCells * cellSize
            self.heightInCells = heightInCells * cellSize
        }
        
        let rect = NSMakeRect(0, 0, CGFloat(lengthInCells), CGFloat(heightInCells))
        super.init(frame: rect)
    }
    
    init (){
        cellSize = 1
        lengthInCells = 100 * cellSize
        heightInCells = 100 * cellSize
        let rect = NSMakeRect(0, 0, CGFloat(lengthInCells), CGFloat(heightInCells))
        super.init(frame: rect)
        s2dg!.world = self
        s2dg!.contentView!.addSubview(self)
    }
    
    /**
     constructor
     - parameter s2dg: The S2DG that World is connected to.
     */
    init(s2dg: S2DG) {
        self.s2dg = s2dg
        let rect = NSMakeRect(0,0,
            CGFloat(s2dg.frame.width),
            CGFloat(s2dg.frame.height))
        super.init(frame: rect)
        s2dg.world = self
        s2dg.contentView!.addSubview(self)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    /**
     Empty method that gets called from the `gameloop`. This is where you
     specify the behavior of your world.
     */
    func act() {
    }
    
    /**
     Adds the specified Actor to this world.
     - parameter actor: To be added to this world.
     */
    func addActor(actor: Actor?, x: Int, y: Int) {
        if  actor === nil {
            NSException(name: "Add Actor Error", reason: "Actor === nil", userInfo: nil).raise()
        }
        if !actors.contains(actor!) {
            actors.append(actor!)
            actor!.setPosition(x, newY: y)
            actor!.getBounds()
            actor!.collision(actor!)
            actor!.world = self
        }
    }
    
    /**
     Removes the last actor from the this world.
     - parameter a: This a as an actor is being removed from world.
     */
    func removeActor(actor: Actor) {
        //Remove last element from the array.
        actors.removeLast()
    }
    
    /**
     Removes all actors elements from this world.
     */
    func clearActors() {
        actors.removeAll()
    }
    
    /**
     Sets the S2DG instance of this world.
     - parameter s2dg: that this world is connected to.
     */
    func setS2DG(s2dg: S2DG) {
        self.s2dg = s2dg
    }
    
    /**
     Returns the S2DG instance that this world is connected to.
     - returns: The s2dg instance that this world is connected to.
     */
    func getS2DG() -> S2DG {
        return s2dg!
    }
    
    /**
     Sets image as a background of this world.
     - paramameter fileName: name of the image file.
     */
    func setImage(fileName: String) {
        image.setImage(fileName)
        let rect = NSMakeRect(0, 0,
            CGFloat(s2dg!.frame.width),
            CGFloat(s2dg!.frame.height))
        imageView = NSImageView(frame: rect)
        imageView!.image = NSImage(byReferencingFile: fileName)
        imageView!.imageScaling = NSImageScaling.ScaleAxesIndependently
        addSubview(imageView!)
    }
    
    /**
     - Returns the image of this world.
     - returns: the image of this world.
     */
    func getImage() -> S2DGImage {
        return image
    }
    
    /**
     This method is constantly being called from the `gameloop` in the S2DG class, and is responsible for updating this world, all the Actors connected to it and appear it to the screen.
     */
    func updateWorld() {
        act();
        for a in actors {
            a.act()
        }
    }
    
    /**
     Returns cellSize of this world.
     - returns: cellSize.
     */
    func getCellSize() -> Int {
        return cellSize
    }
    
    /**
     Returns the length of this world in cells.
     - returns: lengthInCells.
     */
    func getWorldLength() -> Int {
        return lengthInCells
    }
    
    /**
     Returns the height of this world in cells.
     - returns: heightInCells.
     */
    func getWorldHeight() -> Int {
        return heightInCells
    }
    
    /**
     Returns the ArrayList containing all the Actors connected to this world.
     - returns: actors.
     */
    func getactors() -> Array<Actor> {
        return actors
    }
    
    /**
     key input
     Empty method that gets called whenever the user is pressing a key - the input-string can then be distributed to the Actor(s) of choice.
     - parameter key: A String representation of the key that is being pressed.
     */
    func getKeyPressed(key: String) {
    }
    
    /**
     Empty method that gets called whenever the user is releasing a key - the input-string can then be distributed to the Actor(s) of choice.
     - parameter key: A String representation of the key that is being released.
     */
    
    func getKeyReleased(key: String) {
    }
    
    ///Mouse Input
    
    /**
    Empty method that gets called whenever the user is pressing a mouse-button -
    the input-integers can then be distributed to the Actor(s) of choice.
    - parameter mousePX: The position of the mouse on the x-axis when the mouse is pressed.
    - parameter mousePY: The position of the mouse on the y-axis when the mouse is pressed.
    */
    
    func getMousePressed(mousePX: CGFloat, mousePY: CGFloat) {
    }
    
    /**
     Empty method that gets called whenever the user is releasing a mouse-button -
     the input-integers can then be distributed to the Actor(s) of choice.
     - parameter mouseRX: The position of the mouse on the x-axis when the mouse is released.
     - parameter mouseRY: The position of the mouse on the y-axis when the mouse is released.
     */
    func getMouseReleased(mouseRX: CGFloat, mouseRY: CGFloat) {
    }
    
    /**
     Empty method that gets called whenever the user is clicking a mouse-button -
     the input-integers can then be distributed to the Actor(s) of choice.
     - parameter mouseCX: The position of the mouse on the x-axis when the mouse is clicked.
     - parameter mouseCY: The position of the mouse on the y-axis when the mouse is clicked.
     */
    func getMouseClicked(mouseCX: CGFloat, mouseCY: CGFloat) {
    }
}
